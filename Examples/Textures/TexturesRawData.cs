using RaylibSharp;

using static RaylibSharp.Raylib;

public unsafe partial class TexturesRawData : ExampleHelper
{

    // Program main entry point
    public static int Example()
    {
        // Initialization
        const int screenWidth = 800;
        const int screenHeight = 450;

        InitWindow(screenWidth, screenHeight, "RaylibSharp - textures - texture from raw data");

        // NOTE: Textures MUST be loaded after Window initialization (OpenGL context is required)

        // Load RAW image data (512x512, 32bit RGBA, no file header)
        Image fudesumiRaw = LoadImageRaw("resources/fudesumi.Raw", 384, 512, PixelFormat.UncompressedR8g8b8a8, 0);
        Texture fudesumi = LoadTextureFromImage(fudesumiRaw);  // Upload CPU (RAM) image to GPU (VRAM)
        UnloadImage(fudesumiRaw);                                // Unload CPU (RAM) image data

        // Generate a checked texture by code
        int width = 960;
        int height = 480;

        // Dynamic memory allocation to store pixels data (Color type)
        uint[] pixels = new uint[width * height];

        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                if (((x / 32) + (y / 32)) / 1 % 2 == 0)
                {
                    pixels[(y * width) + x] = 0XFFA100FF;
                }
                else
                {
                    pixels[(y * width) + x] = 0xFFCB00FF;
                }
            }
        }

        Texture checkedTexture;

        fixed (uint* variable = pixels)
        {
            // Load pixels data into an image structure and create texture
            Image checkedIm = new()
            {
                Data = (nint)variable, // We can assign pixels directly to data
                Width = width,
                Height = height,
                Format = PixelFormat.UncompressedR8g8b8a8,
                Mipmaps = 1
            };

            checkedTexture = LoadTextureFromImage(checkedIm);
            UnloadImage(checkedIm);         // Unload CPU (RAM) image data (pixels)
        }

        // Main game loop
        while (!WindowShouldClose())    // Detect window close button or ESC key
        {
            // Update
            // TODO: Update your variables here

            // Draw
            BeginDrawing();
            {

                ClearBackground(RayWhite);

                DrawTexture(checkedTexture, (screenWidth / 2) - (checkedTexture.Width / 2), (screenHeight / 2) - (checkedTexture.Height / 2), Fade(White, 0.5f));
                DrawTexture(fudesumi, 430, -30, White);

                DrawText("CHECKED TEXTURE ", 84, 85, 30, Brown);
                DrawText("GENERATED by CODE", 72, 148, 30, Brown);
                DrawText("and RAW IMAGE LOADING", 46, 210, 30, Brown);

                DrawText("(c) Fudesumi sprite by Eiden Marsal", 310, screenHeight - 20, 10, Brown);

            }
            EndDrawing();
        }

        // De-Initialization
        UnloadTexture(fudesumi);       // Texture unloading
        UnloadTexture(checkedTexture); // Texture unloading

        CloseWindow();

        return 0;
    }
}
